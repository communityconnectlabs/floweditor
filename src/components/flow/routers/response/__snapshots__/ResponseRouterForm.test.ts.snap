// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResponseRouterForm initializes case config 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  gutter={
    <TimeoutControl
      onChanged={[Function]}
      timeout={0}
    />
  }
  headerClass="wait_for_response"
  tabs={
    Array [
      Object {
        "body": <div
          className="testingTab"
        >
          <div
            className="liveTests"
          >
            <div
              className="header"
            >
              Live Tests
            </div>
            <div
              className="body"
            >
              <Unknown
                className="languageSelect"
                isSearchable={false}
                name="Intent"
                onChange={[Function]}
                options={Array []}
                placeholder="Language"
                styles={
                  Object {
                    "control": [Function],
                    "indicatorsContainer": [Function],
                    "input": [Function],
                    "menuList": [Function],
                    "option": [Function],
                    "singleValue": [Function],
                    "valueContainer": [Function],
                  }
                }
                value={
                  Object {
                    "label": "English",
                    "value": "eng",
                  }
                }
              />
              <div
                className="testLine"
              >
                <TextInputElement
                  entry={
                    Object {
                      "value": "",
                    }
                  }
                  name="arguments"
                  onChange={[Function]}
                  placeholder="Type text for testing"
                />
              </div>
              <div
                className="categoriesContainer"
              >
                <div
                  className="categoryName"
                >
                  <Pill
                    large={true}
                    text="Red"
                  />
                </div>
              </div>
              <div
                className="buttons"
              >
                <Button
                  name="Save Test"
                  onClick={[Function]}
                  type="secondary"
                />
              </div>
            </div>
          </div>
          <div
            className="automatedTests"
          >
            <div
              className="header"
            >
              Automated Tests
            </div>
            <div
              className="body"
            >
              <table>
                <thead>
                  <tr>
                    <th>
                      Test Text
                    </th>
                    <th>
                      Current Category
                    </th>
                    <th>
                      Confirm
                    </th>
                    <th>
                      Confirmed Category
                    </th>
                    <th>
                      Delete
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <tr
                    className="testCorrect"
                  >
                    <td>
                      <p
                        className="text"
                        title="red"
                      >
                        red
                      </p>
                    </td>
                    <td
                      className="categoryName"
                    >
                      <p
                        className="text"
                        title="Red"
                      >
                        Red
                      </p>
                    </td>
                    <td>
                      <CheckboxElement
                        name="checked"
                        onChange={[Function]}
                      />
                    </td>
                    <td
                      className="categoryName"
                    >
                      <p
                        className="text"
                        title="Red"
                      >
                        Red
                      </p>
                    </td>
                    <td>
                      <i
                        className="fe-x"
                        onClick={[Function]}
                      />
                    </td>
                  </tr>
                </tbody>
              </table>
              <div
                className="buttons"
              >
                <Button
                  name="Confirm All"
                  onClick={[Function]}
                  type="secondary"
                />
                <Button
                  name="Unconfirm All"
                  onClick={[Function]}
                  type="secondary"
                />
                <Button
                  name="Delete All"
                  onClick={[Function]}
                  type="secondary"
                />
              </div>
            </div>
          </div>
        </div>,
        "checked": false,
        "hasErrors": true,
        "name": "Testing",
        "nameStyle": "testingTabNameError",
        "onClick": [Function],
      },
    ]
  }
  title="Wait for Response"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "switch",
        ],
        "description": "Wait for the contact to respond",
        "form": [Function],
        "localization": [Function],
        "localizeableKeys": Array [
          "categories",
          "cases",
        ],
        "name": "Wait for Response",
        "type": "wait_for_response",
        "visibility": Array [
          "messaging",
          "messaging_offline",
        ],
      }
    }
    onChange={[MockFunction]}
  />
  <SpellChecker
    enabledSpell={false}
    onEnabledChange={[Function]}
    onSensitivityChange={[Function]}
    spellSensitivity="70"
  />
  <div>
    If the message response...
  </div>
  <CaseList
    cases={
      Array [
        Object {
          "categoryName": "Red",
          "kase": Object {
            "arguments": Array [
              "red",
            ],
            "category_uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
            "type": "has_any_word",
            "uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
          },
          "uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
          "valid": true,
        },
        Object {
          "categoryName": "Red",
          "kase": Object {
            "arguments": Array [
              "5",
            ],
            "category_uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
            "type": "has_date_eq",
            "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
          },
          "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
          "valid": true,
        },
      ]
    }
    data-spec="cases"
    onCasesUpdated={[Function]}
  />
  <OptionalTextInput
    helpText={
      <Trans
        i18nKey="forms.result_name_help"
        values={
          Object {
            "resultFormat": "@results",
          }
        }
      >
        By naming the result, you can reference it later using [[resultFormat]]
      </Trans>
    }
    maxLength={64}
    name="Result Name"
    onChange={[Function]}
    toggleText="Save as.."
    value={
      Object {
        "value": "",
      }
    }
  />
</Dialog>
`;

exports[`ResponseRouterForm should render 1`] = `
<Dialog
  buttons={
    Object {
      "primary": Object {
        "name": "Ok",
        "onClick": [Function],
      },
      "secondary": Object {
        "name": "Cancel",
        "onClick": [Function],
      },
    }
  }
  gutter={
    <TimeoutControl
      onChanged={[Function]}
      timeout={0}
    />
  }
  headerClass="wait_for_response"
  tabs={
    Array [
      Object {
        "body": <div
          className="testingTab"
        >
          <div
            className="liveTests"
          >
            <div
              className="header"
            >
              Live Tests
            </div>
            <div
              className="body"
            >
              <TembaSelect
                name="Language"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "English",
                      "value": "eng",
                    },
                  ]
                }
                placeholder="Language"
                style="small"
                value={
                  Object {
                    "label": "English",
                    "value": "eng",
                  }
                }
              />
              <div
                className="testLine"
              >
                <TextInputElement
                  entry={
                    Object {
                      "value": "",
                    }
                  }
                  name="arguments"
                  onChange={[Function]}
                  placeholder="Type text for testing"
                />
              </div>
              <div
                className="categoriesContainer"
              >
                <div
                  className="categoryName"
                >
                  <Pill
                    large={true}
                    text="Red"
                  />
                </div>
              </div>
              <div
                className="buttons"
              >
                <Button
                  name="Save Test"
                  onClick={[Function]}
                  type="secondary"
                />
              </div>
            </div>
          </div>
          <div
            className="automatedTests"
          >
            <div
              className="header"
            >
              Automated Tests
            </div>
            <div
              className="body"
            >
              <table>
                <thead>
                  <tr>
                    <th>
                      Test Text
                    </th>
                    <th>
                      Current Category
                    </th>
                    <th>
                      Confirm
                    </th>
                    <th>
                      Confirmed Category
                    </th>
                    <th>
                      Delete
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <tr
                    className="testCorrect"
                  >
                    <td>
                      <p
                        className="text"
                        title="red"
                      >
                        red
                      </p>
                    </td>
                    <td
                      className="categoryName"
                    >
                      <p
                        className="text"
                        title="Red"
                      >
                        Red
                      </p>
                    </td>
                    <td>
                      <CheckboxElement
                        checked={true}
                        name="checked"
                        onChange={[Function]}
                      />
                    </td>
                    <td
                      className="categoryName"
                    >
                      <p
                        className="text"
                        title="Red"
                      >
                        Red
                      </p>
                    </td>
                    <td>
                      <i
                        className="fe-x"
                        onClick={[Function]}
                      />
                    </td>
                  </tr>
                  <tr
                    className="testCorrect"
                  >
                    <td>
                      <p
                        className="text"
                        title="maroon"
                      >
                        maroon
                      </p>
                    </td>
                    <td
                      className="categoryName"
                    >
                      <p
                        className="text"
                        title="Red"
                      >
                        Red
                      </p>
                    </td>
                    <td>
                      <CheckboxElement
                        checked={true}
                        name="checked"
                        onChange={[Function]}
                      />
                    </td>
                    <td
                      className="categoryName"
                    >
                      <p
                        className="text"
                        title="Red"
                      >
                        Red
                      </p>
                    </td>
                    <td>
                      <i
                        className="fe-x"
                        onClick={[Function]}
                      />
                    </td>
                  </tr>
                  <tr
                    className="testCorrect"
                  >
                    <td>
                      <p
                        className="text"
                        title="green"
                      >
                        green
                      </p>
                    </td>
                    <td
                      className="categoryName"
                    >
                      <p
                        className="text"
                        title="Green"
                      >
                        Green
                      </p>
                    </td>
                    <td>
                      <CheckboxElement
                        checked={true}
                        name="checked"
                        onChange={[Function]}
                      />
                    </td>
                    <td
                      className="categoryName"
                    >
                      <p
                        className="text"
                        title="Green"
                      >
                        Green
                      </p>
                    </td>
                    <td>
                      <i
                        className="fe-x"
                        onClick={[Function]}
                      />
                    </td>
                  </tr>
                </tbody>
              </table>
              <div
                className="buttons"
              >
                <Button
                  name="Confirm All"
                  onClick={[Function]}
                  type="secondary"
                />
                <Button
                  name="Unconfirm All"
                  onClick={[Function]}
                  type="secondary"
                />
                <Button
                  name="Delete All"
                  onClick={[Function]}
                  type="secondary"
                />
              </div>
            </div>
          </div>
        </div>,
        "checked": true,
        "hasErrors": false,
        "name": "Testing",
        "nameStyle": "",
        "onClick": [Function],
      },
    ]
  }
  title="Wait for Response"
>
  <TypeList
    __className=""
    initialType={
      Object {
        "aliases": Array [
          "switch",
        ],
        "description": "Wait for the contact to respond",
        "form": [Function],
        "localization": [Function],
        "localizeableKeys": Array [
          "categories",
          "cases",
        ],
        "name": "Wait for Response",
        "type": "wait_for_response",
        "visibility": Array [
          "messaging",
          "messaging_offline",
        ],
      }
    }
    onChange={[MockFunction]}
  />
  <SpellChecker
    enabledSpell={false}
    onEnabledChange={[Function]}
    onSensitivityChange={[Function]}
    spellSensitivity="70"
  />
  <div>
    If the message response...
  </div>
  <CaseList
    cases={
      Array [
        Object {
          "categoryName": "Red",
          "kase": Object {
            "arguments": Array [
              "red",
            ],
            "category_uuid": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
            "type": "has_any_word",
            "uuid": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
          },
          "uuid": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
          "valid": true,
        },
      ]
    }
    data-spec="cases"
    onCasesUpdated={[Function]}
  />
  <OptionalTextInput
    helpText={
      <Trans
        i18nKey="forms.result_name_help"
        values={
          Object {
            "resultFormat": "@results",
          }
        }
      >
        By naming the result, you can reference it later using [[resultFormat]]
      </Trans>
    }
    maxLength={64}
    name="Result Name"
    onChange={[Function]}
    toggleText="Save as.."
    value={
      Object {
        "value": "",
      }
    }
  />
</Dialog>
`;

exports[`ResponseRouterForm updates should save changes 1`] = `
Object {
  "activeLocalizations": Array [
    "eng",
  ],
  "automatedTestCases": Object {
    "eng": Array [
      Object {
        "actualCategory": "Red",
        "confirmed": true,
        "confirmedCategory": "Red",
        "testText": "red",
        "type": 0,
      },
      Object {
        "actualCategory": "Red",
        "confirmed": true,
        "confirmedCategory": "Red",
        "testText": "maroon",
        "type": 0,
      },
      Object {
        "actualCategory": "Green",
        "confirmed": true,
        "confirmedCategory": "Green",
        "testText": "green",
        "type": 0,
      },
    ],
  },
  "cases": Array [
    Object {
      "categoryName": "Red",
      "kase": Object {
        "arguments": Array [
          "red",
        ],
        "type": "has_any_word",
      },
      "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
      "valid": true,
    },
    Object {
      "categoryName": "Red",
      "kase": Object {
        "arguments": Array [
          "maroon",
        ],
        "type": "has_any_word",
      },
      "uuid": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
      "valid": true,
    },
    Object {
      "categoryName": "Green",
      "kase": Object {
        "arguments": Array [
          "green",
        ],
        "type": "has_any_word",
      },
      "uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
      "valid": true,
    },
  ],
  "enabledSpell": false,
  "liveTestText": Object {
    "value": "",
  },
  "localizedCases": Object {
    "eng": Array [
      Object {
        "categoryName": "Red",
        "kase": Object {
          "arguments": Array [
            "red",
          ],
          "type": "has_any_word",
        },
        "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
        "valid": true,
      },
      Object {
        "categoryName": "Red",
        "kase": Object {
          "arguments": Array [
            "maroon",
          ],
          "type": "has_any_word",
        },
        "uuid": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
        "valid": true,
      },
      Object {
        "categoryName": "Green",
        "kase": Object {
          "arguments": Array [
            "green",
          ],
          "type": "has_any_word",
        },
        "uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
        "valid": true,
      },
    ],
  },
  "resultName": Object {
    "validationFailures": Array [],
    "value": "Favorite Color",
  },
  "spellSensitivity": "70",
  "testResults": Object {
    "eng": true,
  },
  "testingLang": Object {
    "label": "English",
    "value": "eng",
  },
  "testingLangs": Array [
    Object {
      "label": "English",
      "value": "eng",
    },
  ],
  "timeout": 180,
  "timezoneData": Object {
    "dateFormat": null,
    "timeZone": null,
  },
  "valid": true,
}
`;

exports[`ResponseRouterForm updates should save changes 2`] = `
Array [
  Object {
    "inboundConnections": Object {},
    "node": Object {
      "actions": Array [],
      "exits": Array [
        Object {
          "uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
        },
        Object {
          "uuid": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
        },
        Object {
          "uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
        },
        Object {
          "uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
        },
      ],
      "router": Object {
        "cases": Array [
          Object {
            "arguments": Array [
              "red",
            ],
            "category_uuid": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
            "type": "has_any_word",
          },
          Object {
            "arguments": Array [
              "maroon",
            ],
            "category_uuid": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
            "type": "has_any_word",
          },
          Object {
            "arguments": Array [
              "green",
            ],
            "category_uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
            "type": "has_any_word",
          },
        ],
        "categories": Array [
          Object {
            "exit_uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
            "name": "Red",
            "uuid": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
          },
          Object {
            "exit_uuid": "763e4844-3e1b-407a-a1b5-5fdfcd308b41",
            "name": "Green",
            "uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
          },
          Object {
            "exit_uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
            "name": "Other",
            "uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
          },
          Object {
            "exit_uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
            "name": "No Response",
            "uuid": "132de855-4042-4dc1-a18f-cc2e6a8f790a",
          },
        ],
        "config": Object {
          "test_cases": Object {
            "eng": Array [
              Object {
                "actualCategory": "Red",
                "confirmed": true,
                "confirmedCategory": "Red",
                "testText": "red",
                "type": 0,
              },
              Object {
                "actualCategory": "Red",
                "confirmed": true,
                "confirmedCategory": "Red",
                "testText": "maroon",
                "type": 0,
              },
              Object {
                "actualCategory": "Green",
                "confirmed": true,
                "confirmedCategory": "Green",
                "testText": "green",
                "type": 0,
              },
            ],
          },
        },
        "default_category_uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
        "operand": "@input.text",
        "result_name": "Favorite Color",
        "type": "switch",
        "wait": Object {
          "timeout": Object {
            "category_uuid": "132de855-4042-4dc1-a18f-cc2e6a8f790a",
            "seconds": 180,
          },
          "type": "msg",
        },
      },
      "uuid": "132de855-4042-4dc1-a18f-cc2e6a8f790a",
    },
    "ui": Object {
      "config": Object {
        "cases": Object {},
      },
      "position": null,
      "type": "wait_for_response",
    },
  },
]
`;

exports[`ResponseRouterForm updates should save save config for relative dates 1`] = `
Object {
  "activeLocalizations": Array [
    "eng",
  ],
  "automatedTestCases": Object {
    "eng": Array [],
  },
  "cases": Array [
    Object {
      "categoryName": "In the Zone",
      "kase": Object {
        "arguments": Array [
          "5",
        ],
        "type": "has_date_gt",
      },
      "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
      "valid": true,
    },
  ],
  "enabledSpell": false,
  "liveTestText": Object {
    "value": "",
  },
  "localizedCases": Object {
    "eng": Array [
      Object {
        "categoryName": "In the Zone",
        "kase": Object {
          "arguments": Array [
            "5",
          ],
          "type": "has_date_gt",
        },
        "uuid": "b1f332f3-bdd3-4891-aec5-1843a712dbf1",
        "valid": true,
      },
    ],
  },
  "resultName": Object {
    "value": "",
  },
  "spellSensitivity": "70",
  "testResults": Object {
    "eng": true,
  },
  "testingLang": Object {
    "label": "English",
    "value": "eng",
  },
  "testingLangs": Array [
    Object {
      "label": "English",
      "value": "eng",
    },
  ],
  "timeout": 0,
  "timezoneData": Object {
    "dateFormat": null,
    "timeZone": null,
  },
  "valid": true,
}
`;

exports[`ResponseRouterForm updates should save save config for relative dates 2`] = `
Array [
  Object {
    "inboundConnections": Object {},
    "node": Object {
      "actions": Array [],
      "exits": Array [
        Object {
          "uuid": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
        },
        Object {
          "uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
        },
      ],
      "router": Object {
        "cases": Array [
          Object {
            "arguments": Array [
              "@(datetime_add(today(), 5, \\"D\\"))",
            ],
            "category_uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
            "type": "has_date_gt",
          },
        ],
        "categories": Array [
          Object {
            "exit_uuid": "061fc171-8b79-4636-b892-bd0ea5aa9b42",
            "name": "In the Zone",
            "uuid": "1dce2b34-9aab-4e20-81c4-3f0408dcb671",
          },
          Object {
            "exit_uuid": "477ac8b4-25e2-483a-8686-2d1332c4da1c",
            "name": "Other",
            "uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
          },
        ],
        "config": Object {
          "test_cases": Object {
            "eng": Array [],
          },
        },
        "default_category_uuid": "1e47a1e1-3c67-4df5-adf1-da542c789adb",
        "operand": "@input.text",
        "type": "switch",
        "wait": Object {
          "type": "msg",
        },
      },
      "uuid": "132de855-4042-4dc1-a18f-cc2e6a8f790a",
    },
    "ui": Object {
      "config": Object {
        "cases": Object {
          "b1f332f3-bdd3-4891-aec5-1843a712dbf1": Object {
            "arguments": Array [
              "5",
            ],
          },
        },
      },
      "position": null,
      "type": "wait_for_response",
    },
  },
]
`;
